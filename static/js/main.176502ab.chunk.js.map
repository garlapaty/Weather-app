{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","title-container__subtitle","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","list","main","temp","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.176502ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <h3 title-container__subtitle>\r\n      Find out temperature, conditions and more...\r\n    </h3>\r\n  </div>\r\n);\r\nexport default Titles;\r\n","import React from 'react';\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    {' '}\r\n    {props.city && props.country && (\r\n      <p className=\"weather__key\">\r\n        Location:\r\n        <span className=\"weather__value\">\r\n          {' '}\r\n          {props.city},{props.country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {props.temperature && (\r\n      <p className=\"weather__key\">\r\n        Temperature:\r\n        <span className=\"weather__value\"> {props.temperature}Â°C</span>\r\n      </p>\r\n    )}\r\n    {props.humidity && (\r\n      <p className=\"weather__key\">\r\n        Humidity:\r\n        <span className=\"weather__value\"> {props.humidity}%</span>\r\n      </p>\r\n    )}\r\n    {props.description && (\r\n      <p className=\"weather__key\">\r\n        Conditions:\r\n        <span className=\"weather__value\"> {props.description}</span>\r\n      </p>\r\n    )}\r\n    {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n  </div>\r\n);\r\nexport default Weather;\r\n","//Importing react object from React package\nimport React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nconst API_KEY = '99374526d2f985f994a91076c5e97199';\n//Initialize a  component\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.list[0].main.temp,\n        city: data.city.name,\n        country: data.city.country,\n        humidity: data.list[0].main.humidity,\n        description: data.list[0].weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the values.'\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />{' '}\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}